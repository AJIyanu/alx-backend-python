# GREEN DEPLOYMENT - New Version for Testing
apiVersion: apps/v1
kind: Deployment
metadata:
  name: django-messaging-green
  labels:
    app: django-messaging
    version: green
    environment: staging
spec:
  replicas: 3
  selector:
    matchLabels:
      app: django-messaging
      version: green
  template:
    metadata:
      labels:
        app: django-messaging
        version: green
        environment: staging
    spec:
      initContainers:
        - name: wait-for-mysql
          image: busybox:1.35
          command: ["sh", "-c"]
          args:
            - |
              until nc -z mysql-service 3306; do
                echo "Waiting for MySQL to be ready..."
                sleep 2
              done
              echo "MySQL is ready!"
      containers:
        - name: django-app
          # GREEN VERSION - New version being tested
          image: python:3.11-slim
          ports:
            - containerPort: 8000
          env:
            - name: DEBUG
              valueFrom:
                configMapKeyRef:
                  name: django-config
                  key: DEBUG
            - name: DB_HOST
              valueFrom:
                configMapKeyRef:
                  name: django-config
                  key: DB_HOST
            - name: DB_PORT
              valueFrom:
                configMapKeyRef:
                  name: django-config
                  key: DB_PORT
            - name: DB_NAME
              valueFrom:
                configMapKeyRef:
                  name: django-config
                  key: DB_NAME
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: django-secrets
                  key: DB_USER
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: django-secrets
                  key: DB_PASSWORD
            - name: ALLOWED_HOSTS
              valueFrom:
                configMapKeyRef:
                  name: django-config
                  key: ALLOWED_HOSTS
            - name: SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: django-secrets
                  key: SECRET_KEY
            - name: VERSION
              value: "v2.0.0-green"
            - name: DEPLOYMENT_COLOR
              value: "green"
          command: ["/bin/bash"]
          args:
            - "-c"
            - |
              apt-get update && apt-get install -y pkg-config default-libmysqlclient-dev build-essential netcat-openbsd &&
              pip install django djangorestframework mysqlclient requests &&
              django-admin startproject messaging_app . &&
              cat > messaging_app/settings.py << 'EOF'
              import os
              from pathlib import Path

              BASE_DIR = Path(__file__).resolve().parent.parent
              SECRET_KEY = os.getenv('SECRET_KEY', 'django-insecure-fallback-key')
              DEBUG = os.getenv('DEBUG', 'False') == 'True'
              ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', '').split(',')

              INSTALLED_APPS = [
                  'django.contrib.admin',
                  'django.contrib.auth',
                  'django.contrib.contenttypes',
                  'django.contrib.sessions',
                  'django.contrib.messages',
                  'django.contrib.staticfiles',
                  'rest_framework',
              ]

              MIDDLEWARE = [
                  'django.middleware.security.SecurityMiddleware',
                  'django.contrib.sessions.middleware.SessionMiddleware',
                  'django.middleware.common.CommonMiddleware',
                  'django.middleware.csrf.CsrfViewMiddleware',
                  'django.contrib.auth.middleware.AuthenticationMiddleware',
                  'django.contrib.messages.middleware.MessageMiddleware',
                  'django.middleware.clickjacking.XFrameOptionsMiddleware',
              ]

              ROOT_URLCONF = 'messaging_app.urls'

              TEMPLATES = [
                  {
                      'BACKEND': 'django.template.backends.django.DjangoTemplates',
                      'DIRS': [],
                      'APP_DIRS': True,
                      'OPTIONS': {
                          'context_processors': [
                              'django.template.context_processors.debug',
                              'django.template.context_processors.request',
                              'django.contrib.auth.context_processors.auth',
                              'django.contrib.messages.context_processors.messages',
                          ],
                      },
                  },
              ]

              WSGI_APPLICATION = 'messaging_app.wsgi.application'

              DATABASES = {
                  'default': {
                      'ENGINE': 'django.db.backends.mysql',
                      'NAME': os.getenv('DB_NAME', 'messaging_app_db'),
                      'USER': os.getenv('DB_USER', 'django_user'),
                      'PASSWORD': os.getenv('DB_PASSWORD'),
                      'HOST': os.getenv('DB_HOST', 'mysql-service'),
                      'PORT': os.getenv('DB_PORT', '3306'),
                      'OPTIONS': {
                          'charset': 'utf8mb4',
                      },
                  }
              }

              LANGUAGE_CODE = 'en-us'
              TIME_ZONE = 'UTC'
              USE_I18N = True
              USE_TZ = True

              STATIC_URL = '/static/'
              DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

              REST_FRAMEWORK = {
                  'DEFAULT_PERMISSION_CLASSES': [
                      'rest_framework.permissions.IsAuthenticated',
                  ]
              }
              EOF

              # Create enhanced views with new features for GREEN version
              cat > messaging_app/views.py << 'EOF'
              from django.http import JsonResponse
              from django.views.decorators.csrf import csrf_exempt
              import os
              import json

              def version_info(request):
                  return JsonResponse({
                      'version': os.getenv('VERSION', 'unknown'),
                      'deployment_color': os.getenv('DEPLOYMENT_COLOR', 'unknown'),
                      'status': 'healthy',
                      'features': ['enhanced_api', 'better_logging', 'improved_performance'],
                      'timestamp': '2024-01-01T00:00:00Z'
                  })

              def health_check(request):
                  return JsonResponse({
                      'status': 'healthy',
                      'version': os.getenv('VERSION', 'unknown'),
                      'deployment': os.getenv('DEPLOYMENT_COLOR', 'unknown')
                  })

              @csrf_exempt
              def api_messages(request):
                  if request.method == 'GET':
                      return JsonResponse({
                          'messages': [
                              {'id': 1, 'content': 'Hello from GREEN deployment!', 'user': 'system'},
                              {'id': 2, 'content': 'New features available in v2.0.0', 'user': 'admin'}
                          ],
                          'version': os.getenv('VERSION', 'unknown')
                      })
                  elif request.method == 'POST':
                      return JsonResponse({
                          'status': 'message_created',
                          'version': os.getenv('VERSION', 'unknown')
                      })
                  else:
                      return JsonResponse({'error': 'Method not allowed'}, status=405)
              EOF

              # Update URLs to include new endpoints
              cat > messaging_app/urls.py << 'EOF'
              from django.contrib import admin
              from django.urls import path
              from . import views

              urlpatterns = [
                  path('admin/', admin.site.urls),
                  path('version/', views.version_info, name='version_info'),
                  path('health/', views.health_check, name='health_check'),
                  path('api/messages/', views.api_messages, name='api_messages'),
                  path('', views.version_info, name='home'),
              ]
              EOF

              python manage.py makemigrations &&
              python manage.py migrate &&
              python manage.py runserver 0.0.0.0:8000
          volumeMounts:
            - name: app-storage
              mountPath: /app
          workingDir: /app
          resources:
            requests:
              memory: "512Mi"
              cpu: "250m"
            limits:
              memory: "1Gi"
              cpu: "500m"
          livenessProbe:
            httpGet:
              path: /health/
              port: 8000
            initialDelaySeconds: 120
            periodSeconds: 30
            timeoutSeconds: 10
          readinessProbe:
            httpGet:
              path: /health/
              port: 8000
            initialDelaySeconds: 90
            periodSeconds: 10
            timeoutSeconds: 5
      volumes:
        - name: app-storage
          emptyDir: {}
      restartPolicy: Always
