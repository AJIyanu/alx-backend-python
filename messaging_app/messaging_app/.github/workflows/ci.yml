name: CI/CD Pipeline

# Trigger the workflow on push and pull requests
on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:  # Allow manual triggering

# Environment variables for the entire workflow
env:
  PYTHON_VERSION: '3.9'
  NODE_VERSION: '16'
  DJANGO_SETTINGS_MODULE: 'messaging_app.settings.test'
  DATABASE_URL: 'mysql://test_user:test_password@127.0.0.1:3306/test_messaging_db'

# Define jobs
jobs:
  # Job 1: Code Quality and Linting
  lint-and-format:
    name: 🔍 Code Quality & Formatting
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: 📦 Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8 pylint bandit safety
        
    - name: 🎨 Check code formatting with Black
      run: |
        black --check --diff .
        
    - name: 📋 Check import sorting with isort
      run: |
        isort --check-only --diff .
        
    - name: 🔍 Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --max-complexity=10 --max-line-length=88 --statistics
        
    - name: 🕵️ Security check with bandit
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . --skip B101
        
    - name: 🛡️ Check for known security vulnerabilities
      run: |
        safety check --json --output safety-report.json || true
        safety check
        
    - name: 📊 Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # Job 2: Django Tests with MySQL
  test-django:
    name: 🧪 Django Tests (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']
        
    # MySQL service configuration
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root_password
          MYSQL_DATABASE: test_messaging_db
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
          
      # Redis service for caching/sessions (optional)
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        
    - name: 🗄️ Wait for MySQL to be ready
      run: |
        echo "Waiting for MySQL to be ready..."
        for i in {1..30}; do
          if mysqladmin ping -h 127.0.0.1 -P 3306 -u test_user -ptest_password --silent; then
            echo "MySQL is ready!"
            break
          fi
          echo "Waiting for MySQL... ($i/30)"
          sleep 2
        done
        
    - name: 🔧 Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libmysqlclient-dev \
          mysql-client \
          gettext \
          libgettextpo-dev
          
    - name: 📦 Install Python dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        
        # Install main dependencies
        if [ -f "requirements.txt" ]; then
          pip install -r requirements.txt
        fi
        
        # Install test dependencies
        if [ -f "requirements/test.txt" ]; then
          pip install -r requirements/test.txt
        elif [ -f "requirements-test.txt" ]; then
          pip install -r requirements-test.txt
        else
          # Install common test dependencies if no specific file exists
          pip install \
            pytest \
            pytest-django \
            pytest-cov \
            pytest-xdist \
            pytest-mock \
            factory-boy \
            coverage \
            mysqlclient
        fi
        
        # Install development dependencies if they exist
        if [ -f "requirements/dev.txt" ]; then
          pip install -r requirements/dev.txt
        elif [ -f "requirements-dev.txt" ]; then
          pip install -r requirements-dev.txt
        fi
        
    - name: 📋 Display installed packages
      run: pip list
      
    - name: 🗄️ Verify MySQL connection
      run: |
        mysql -h 127.0.0.1 -P 3306 -u test_user -ptest_password -e "SHOW DATABASES;"
        mysql -h 127.0.0.1 -P 3306 -u test_user -ptest_password -e "USE test_messaging_db; SHOW TABLES;" || true
        
    - name: ⚙️ Create test settings file
      run: |
        mkdir -p messaging_app/settings
        cat > messaging_app/settings/test.py << 'EOF'
from .base import *  # noqa: F401, F403
import os

# Test database configuration
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'test_messaging_db',
        'USER': 'test_user',
        'PASSWORD': 'test_password',
        'HOST': '127.0.0.1',
        'PORT': '3306',
        'OPTIONS': {
            'charset': 'utf8mb4',
            'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
        },
        'TEST': {
            'NAME': 'test_messaging_db_test',
            'CHARSET': 'utf8mb4',
            'COLLATION': 'utf8mb4_unicode_ci',
        }
    }
}

# Cache configuration for testing
CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': 'redis://127.0.0.1:6379/1',
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
        }
    }
} if 'django_redis' in sys.modules else {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
    }
}

# Test-specific settings
DEBUG = True
SECRET_KEY = 'test-secret-key-only-for-testing-do-not-use-in-production'
ALLOWED_HOSTS = ['*']

# Disable migrations for faster tests (optional)
class DisableMigrations:
    def __contains__(self, item):
        return True
    def __getitem__(self, item):
        return None

# Uncomment to disable migrations for faster tests
# MIGRATION_MODULES = DisableMigrations()

# Email backend for testing
EMAIL_BACKEND = 'django.core.mail.backends.locmem.EmailBackend'

# Media files for testing
MEDIA_ROOT = '/tmp/test_media'

# Static files for testing
STATIC_ROOT = '/tmp/test_static'

# Logging configuration for tests
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
    'loggers': {
        'django.db.backends': {
            'level': 'WARNING',
            'handlers': ['console'],
            'propagate': False,
        },
    },
}
EOF
        
    - name: 🔄 Run Django migrations
      run: |
        python manage.py makemigrations --dry-run --check || true
        python manage.py migrate --noinput
        
    - name: 🏗️ Collect static files
      run: |
        python manage.py collectstatic --noinput --clear
        
    - name: ✅ Check Django system
      run: |
        python manage.py check --deploy
        
    - name: 🧪 Run Django tests with coverage
      run: |
        # Run tests with coverage
        coverage run --source='.' manage.py test --verbosity=2 --parallel --keepdb
        
        # Generate coverage reports
        coverage report --show-missing
        coverage xml -o coverage.xml
        coverage html -d htmlcov
        
    - name: 🧪 Run pytest tests (if pytest is configured)
      run: |
        if [ -f "pytest.ini" ] || [ -f "pyproject.toml" ] && grep -q pytest pyproject.toml; then
          echo "Running pytest tests..."
          pytest --verbose --tb=short --cov=. --cov-report=xml --cov-report=html --cov-report=term-missing
        else
          echo "No pytest configuration found, skipping pytest tests"
        fi
      continue-on-error: true
      
    - name: 📊 Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        
    - name: 📈 Upload coverage artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: coverage-report-${{ matrix.python-version }}
        path: |
          coverage.xml
          htmlcov/
          
    - name: 🗄️ Dump database schema (for debugging)
      if: failure()
      run: |
        python manage.py dumpdata --format=json --indent=2 auth.User > test_users.json || true
        mysqldump -h 127.0.0.1 -P 3306 -u test_user -ptest_password --no-data test_messaging_db > schema.sql || true
        
    - name: 📤 Upload debug artifacts
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: debug-artifacts-${{ matrix.python-version }}
        path: |
          test_users.json
          schema.sql

  # Job 3: Frontend Tests (if you have JavaScript/CSS)
  test-frontend:
    name: 🎨 Frontend Tests
    runs-on: ubuntu-latest
    if: ${{ hashFiles('package.json') != '' }}
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🟢 Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install frontend dependencies
      run: npm ci
      
    - name: 🧪 Run frontend tests
      run: |
        npm test
        npm run build --if-present
        
    - name: 📊 Upload frontend test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: frontend-test-results
        path: |
          coverage/
          test-results/

  # Job 4: Integration Tests
  integration-tests:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: [lint-and-format, test-django]
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root_password
          MYSQL_DATABASE: test_messaging_db
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
          
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: 🔧 Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libmysqlclient-dev mysql-client
        
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install selenium pytest-django pytest-mock
        
    - name: 🗄️ Wait for services
      run: |
        # Wait for MySQL
        for i in {1..30}; do
          if mysqladmin ping -h 127.0.0.1 -P 3306 -u test_user -ptest_password --silent; then
            break
          fi
          sleep 2
        done
        
        # Wait for Redis
        timeout 30 bash -c 'until redis-cli -h 127.0.0.1 -p 6379 ping; do sleep 1; done'
        
    - name: 🏗️ Setup test environment
      run: |
        python manage.py migrate --noinput
        python manage.py collectstatic --noinput
        
    - name: 🧪 Run integration tests
      run: |
        python manage.py test tests.integration --verbosity=2 || echo "No integration tests found"
        
    - name: 🌐 Run end-to-end tests with Selenium
      run: |
        # Install Chrome for Selenium tests
        wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list'
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable
        
        # Run Selenium tests if they exist
        if [ -d "tests/selenium" ] || [ -d "functional_tests" ]; then
          python manage.py test tests.selenium --verbosity=2 || echo "No Selenium tests found"
        fi
      continue-on-error: true

  # Job 5: Security and Dependency Checks
  security-checks:
    name: 🔒 Security & Dependency Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit semgrep
        if [ -f "requirements.txt" ]; then pip install -r requirements.txt; fi
        
    - name: 🛡️ Run safety check
      run: safety check --json --output safety-report.json || safety check
      
    - name: 🕵️ Run bandit security check
      run: bandit -r . -f json -o bandit-report.json || bandit -r .
      
    - name: 🔍 Run semgrep security analysis
      run: |
        semgrep --config=auto --json --output=semgrep-report.json . || semgrep --config=auto .
      continue-on-error: true
      
    - name: 📊 Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-analysis
        path: |
          safety-report.json
          bandit-report.json
          semgrep-report.json

  # Job 6: Build Summary
  build-summary:
    name: 📋 Build Summary
    runs-on: ubuntu-latest
    needs: [lint-and-format, test-django, integration-tests, security-checks]
    if: always()
    
    steps:
    - name: 📊 Generate build summary
      run: |
        echo "# 🚀 Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Code Quality & Formatting | ${{ needs.lint-and-format.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Django Tests | ${{ needs.test-django.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Integration Tests | ${{ needs.integration-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Security Checks | ${{ needs.security-checks.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Repository:** ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
        echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "**Triggered by:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY